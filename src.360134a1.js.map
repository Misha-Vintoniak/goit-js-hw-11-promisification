{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","catch","logError","warn","amount"],"mappings":"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","file":"src.360134a1.js","sourceRoot":"..\\src","sourcesContent":["/*Напиши функцию delay(ms), которая возвращает промис,\r\nпереходящий в состояние \"resolved\" через ms миллисекунд.\r\nЗначением исполнившегося промиса должно быть то кол - \r\nво миллисекунд которое передали во время вызова функции delay.\r\n*/\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\nconsole.log(delay(2000).then(logger)); // Resolved after 2000ms\r\nconsole.log(delay(1000).then(logger)); // Resolved after 1000ms\r\nconsole.log(delay(1500).then(logger)); // Resolved after 1500ms\r\n","/*Перепиши функцію toggleUserState() так, щоб вона\r\nне використовувала callback - функцію callback,\r\nа приймала всього два параметри allUsers і userName\r\nі повертала проміс.*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n// варіант з callback\r\n/*\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\n// Зараз працює так\r\n \r\n// console.log(toggleUserState1(users, 'Mango', logger));\r\n// console.log(toggleUserState1(users, 'Lux', logger));\r\n*/\r\n\r\n//  Варіант 1\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\n// Варіант 2\r\n/*\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\n*/\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Повинно працювати так\r\n */\r\nconsole.log(toggleUserState(users, 'Mango').then(logger));\r\nconsole.log(toggleUserState(users, 'Lux').then(logger));\r\n","/*Перепиши функцію makeTransaction() так, щоб вона\r\nне використовувала callback - функції onSuccess і\r\nonError, а приймала всього один параметр transaction\r\nі повертала проміс.*/\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n/*\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n//  Працює так\r\n\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n*/\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve(transaction.id, delay);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nmakeTransaction().then(logSuccess).catch(logError);\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Повинно працювати так\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","import './js/task-1.js';\r\nimport './js/task-2.js';\r\nimport './js/task-3.js';\r\n"]}